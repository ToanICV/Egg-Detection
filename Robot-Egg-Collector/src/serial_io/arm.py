"""Bao b·ªçc giao ti·∫øp n·ªëi ti·∫øp v·ªõi c√°nh tay robot."""

from __future__ import annotations

import logging
import time
from typing import Callable, Optional

from config.models import SerialLinkConfig

from .bus import SharedSerialBus
from .codec import DecodedFrame
from .protocol import (
    ARM_GROUP_COMMAND,
    ARM_GROUP_STATUS,
    ArmCommand,
    ArmStatus,
    build_arm_pick_command,
    build_arm_status_request,
    parse_arm_status,
)

logger = logging.getLogger("serial.arm")


class ArmLink:
    """L·ªõp bao b·ªçc c·∫•p cao ƒë·ªÉ g·ª≠i l·ªánh v√† nh·∫≠n tr·∫°ng th√°i t·ª´ c√°nh tay."""

    def __init__(
        self,
        bus: SharedSerialBus,
        config: SerialLinkConfig,
        on_status: Optional[Callable[[ArmStatus], None]] = None,
    ) -> None:
        """Thi·∫øt l·∫≠p li√™n k·∫øt v·ªõi bus n·ªëi ti·∫øp v√† callback tr·∫°ng th√°i t√πy ch·ªçn."""
        self._bus = bus
        self.config = config
        self._status_callback = on_status
        self._last_status: ArmStatus | None = None
        self._listener_id = self._bus.register_listener(self._handle_frame)

    def start(self) -> None:
        """B·∫Øt ƒë·∫ßu giao ti·∫øp n·ªëi ti·∫øp v·ªõi c√°nh tay."""
        self._bus.start()

    def shutdown(self) -> None:
        """T·∫Øt bus n·ªëi ti·∫øp khi kh√¥ng c·∫ßn ƒëi·ªÅu khi·ªÉn c√°nh tay."""
        self._bus.stop()

    def pick(self, x_mm: int, y_mm: int) -> bool:
        """G·ª≠i l·ªánh g·∫Øp tr·ª©ng t·∫°i t·ªça ƒë·ªô ƒë√£ quy ƒë·ªïi sang milimet."""
        frame = build_arm_pick_command(x_mm, y_mm)
        timeout = self.config.ack_timeout_ms / 1000.0
        frame_hex = frame.hex().upper()
        logger.info("üì§ ARM CMD: PICK (%d, %d)mm ‚Üí COM%s [%s]", x_mm, y_mm, self.config.port, frame_hex)
        ack = self._bus.request(
            frame,
            predicate=lambda f: f.group == ARM_GROUP_COMMAND
            and len(f.payload_as_ints()) >= 1
            and f.payload_as_ints()[0] == ArmCommand.ACK,
            timeout_s=timeout,
        )
        if ack is None:
            logger.warning("‚ùå ARM CMD: PICK timeout (no ACK after %.1fs)", timeout)
            return False
        if not ack.crc_ok:
            logger.warning("‚ùå ARM CMD: PICK ACK failed CRC validation")
            return False
        logger.info("‚úÖ ARM CMD: PICK acknowledged")
        return True

    def read_status(self, timeout_s: Optional[float] = None) -> Optional[ArmStatus]:
        """G·ª≠i y√™u c·∫ßu tr·∫°ng th√°i hi·ªán t·∫°i v√† ch·ªù ph·∫£n h·ªìi trong gi·ªõi h·∫°n th·ªùi gian."""
        frame = build_arm_status_request()
        timeout = timeout_s if timeout_s is not None else self.config.response_timeout_ms / 1000.0
        logger.debug("üì§ ARM STATUS: requesting ‚Üí COM%s", self.config.port)
        response = self._bus.request(
            frame,
            predicate=lambda f: f.group == ARM_GROUP_STATUS,
            timeout_s=timeout,
        )
        if response is None:
            logger.warning("‚ùå ARM STATUS: timeout (%.1fs)", timeout)
            return None
        if not response.crc_ok:
            logger.warning("‚ùå ARM STATUS: invalid CRC")
            return None
        status = parse_arm_status(response)
        logger.debug("üì• ARM STATUS: busy=%s", status.is_busy)
        self._update_status(status)
        return status

    def wait_until_idle(self, timeout_s: float, poll_interval_s: float) -> bool:
        """ThƒÉm d√≤ tr·∫°ng th√°i cho t·ªõi khi c√°nh tay r·∫£nh ho·∫∑c h·∫øt th·ªùi gian ch·ªù."""
        end_time = time.monotonic() + timeout_s
        while time.monotonic() < end_time:
            status = self.read_status(timeout_s=poll_interval_s)
            if status and not status.is_busy:
                return True
            time.sleep(poll_interval_s)
        return False

    def last_status(self) -> Optional[ArmStatus]:
        """Tr·∫£ v·ªÅ b·∫£n tr·∫°ng th√°i m·ªõi nh·∫•t ƒë∆∞·ª£c ghi nh·∫≠n."""
        return self._last_status

    def _handle_frame(self, frame: DecodedFrame) -> None:
        """L·ªçc c√°c khung tr·∫°ng th√°i v√† chuy·ªÉn th√†nh ƒë·ªëi t∆∞·ª£ng ArmStatus."""
        if frame.group != ARM_GROUP_STATUS:
            return
        if not frame.crc_ok:
            logger.debug("ArmLink: ignoring status frame with invalid CRC.")
            return
        try:
            status = parse_arm_status(frame)
        except Exception:  # pragma: no cover - defensive parsing
            logger.exception("ArmLink: failed to parse status frame.")
            return
        self._update_status(status)

    def _update_status(self, status: ArmStatus) -> None:
        """L∆∞u tr·∫°ng th√°i v√† k√≠ch ho·∫°t callback ng∆∞·ªùi d√πng n·∫øu c√≥."""
        self._last_status = status
        if self._status_callback:
            try:
                self._status_callback(status)
            except Exception:
                logger.exception("ArmLink: status callback failed.")
